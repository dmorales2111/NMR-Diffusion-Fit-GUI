import nmrglue as ngimport numpy as npimport matplotlib.pyplot as pltfrom scipy.optimize import curve_fitimport osimport timeprint('Dan\'s diffusion curve fitting tool (est.2020)')time.sleep(2)print('Now with 33% more diffusion! (compared to leading brands)')time.sleep(2)direct = input("""Please enter directory (should contain varian fid folder, which                contains procpar file and SpinWorks integ_series files """)#%%os.chdir(direct)parameters = ng.varian.read_procpar('procpar')#parses procpar file to produce gradient values (in G/cm),  big del and little del (in s)gzlvls = np.array(parameters['gzlvl1']['values']).astype(float)gradcal = float(parameters['gcal_']['values'][0])grad_values = gradcal * gzlvlsgrad_valuesT = gradcal * gzlvls / 100Delta = float(parameters['del']['values'][0])delta = float(parameters['gt1']['values'][0])#list of gyromagnetic ratios (in MHz/T)gyro_list = {    'H1':42577478.51818,    'F19':40052000,    'Li7':16546000,    'Na23':11262000    }gyro = gyro_list.get(parameters['tn']['values'][0])#%%#now open the integrals file from spinworks, and extract integral serieswith open(r"integ_series.txt",  'r') as f:    lines = f.readlines()    int_messy = lines[-1]    int_messy = int_messy.strip()    integrals_almost = int_messy.split()    integrals = np.array(integrals_almost[3:]).astype(float)    f.close()    #normalizenormint = integrals / np.max(integrals)#%% Now lets plot the dataxdata = grad_valuesxdataT = grad_valuesTydata = normintplt.figure()plt.title('%s Diffusion' % parameters['tn']['values'][0])plt.xlabel("Gradient (G/cm)")plt.ylabel("Normalized Intensity")plt.plot(xdata,ydata,'p', label = 'Experimental data')#define the fitting function, Stejskal-Tanner (1-component)def fitfunc1(x,I0,D):    return I0 * np.exp(-D * (gyro*2*np.pi* delta * x/100)**2 * (Delta - (delta/3)))popt, pcov = curve_fit(fitfunc1, xdata, ydata, p0 = np.array([0.95,1e-11]))plt.plot(xdata, fitfunc1(xdata, *popt),label='Fit, I0 = %5.3f, D = %5.2e m^2/s' % tuple(popt))plt.legend()stdDiff = np.sqrt(np.diag(pcov))[1]print('Fit complete. Fitted Diffusion coefficient is D = %5.2e m^2/s, Standard deviation sigma = %5.1e m^2/s'       % tuple([popt[1],stdDiff]))time.sleep(1)plt.savefig('Diffusion fit plot.tif',dpi=200)print('Fit graph saved in %s' % direct)